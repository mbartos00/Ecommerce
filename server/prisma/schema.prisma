generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Gender {
  male
  female
  other
}

enum Role {
  admin
  user
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  name      String
  lastName  String
  password  String?
  role      Role?    @default(user)
  createdAt DateTime @default(now())

  favorites_list Favorites?
  paymentMethods PaymentMethod[]

  profile    Profile?
  OAuthToken OAuthToken[]
  addresses  Address[]
}

model OAuthToken {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  provider String
  token    String

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

model Profile {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  gender            Gender?
  birthday          DateTime?
  phone_number      String?
  profile_photo_url String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.ObjectId
}

model Product {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  brand             String
  description       String
  rating            Float
  price             Float
  images            String[]
  categoryIds       String[]      @db.ObjectId
  categories        Category[]    @relation(fields: [categoryIds], references: [id])
  favorites_list_id String?       @db.ObjectId
  favorites_list    Favorites?    @relation(fields: [favorites_list_id], references: [id])
  variants          Variant[]
  soldProducts      SoldProduct[]
  createdAt         DateTime      @default(now())
}

model Favorites {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String    @unique @db.ObjectId
  products Product[]
}

model Category {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  productIds String[]  @db.ObjectId
  products   Product[] @relation(fields: [productIds], references: [id])
}

model Variant {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  color     String
  condition Condition
  size      Size
  quantity  Int
  productId String    @db.ObjectId
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
}

enum Condition {
  new
  used
}

enum Size {
  xs
  s
  m
  l
  xl
  xxl
}

model News {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  imageUrl          String
  description_short String
  content           String
  news_category_id  String       @db.ObjectId
  category          NewsCategory @relation(fields: [news_category_id], references: [id])
  author_full_name  String // later: change to user that created news in admin panel
  createdAt         DateTime     @default(now())
}

model NewsCategory {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  news News[]
}

model Discount {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  code           String       @unique
  discountAmount Float
  discountType   DiscountType
  createdAt      DateTime     @default(now())
  expiresAt      DateTime?
}

enum DiscountType {
  percentage
  fixed
}

model ShippingCost {
  id                         String @id @default(auto()) @map("_id") @db.ObjectId
  shipping_carrier           String
  shipping_price             Float
  shipping_carrier_image_url String
}

model PaymentMethod {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  type           PaymentTypes
  cardNumber     String?
  expirationDate String?
  securityCode   String?
  cardHolder     String?

  email       String?
  phoneNumber String?

  firstName     String?
  lastName      String?
  accountNumber String?
  bankName      String?
  address       String?

  userId String? @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id])
}

enum PaymentTypes {
  credit_card
  paypal
  bank_transfer
}

model Address {
  id                    String  @id @default(auto()) @map("_id") @db.ObjectId
  country               String
  name                  String
  lastName              String
  street_address        String
  street_address_2      String?
  city                  String
  state_province_region String
  zip_code              String
  phone_number          String

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SoldProduct {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  Product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  saleDate  DateTime @default(now())
}
